import React, { Component } from 'react';
import { HourInterval, Temperature } from '..';
import { convertUnixToDate } from '../common/helpers';

class Day extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isShowingDetails: false,
      tempDay: undefined,
      dayIcon: undefined,
      tempNight: undefined,
      nightIcon: undefined
    };

    this.setTempDay = this.setTempDay.bind(this);
    this.setTempNight = this.setTempNight.bind(this);
    this.getDayAndNightTemp = this.getDayAndNightTemp.bind(this);
    this.handleSelect = this.handleSelect.bind(this);
  }

  componentDidMount() {
    !(this.props.data === undefined) &&
      this.getDayAndNightTemp(this.props.data);
  }

  handleSelect() {
    this.setState(prevState => ({
      isShowingDetails: !prevState.isShowingDetails
    }));
  }

  getDayAndNightTemp(data) {
    /* Filter out 3-hour intervals that in order to display an weekly overview */
    !(data === undefined) &&
      Object.values(data).find(data3h => {
        if (data3h.time === '2:00') {
          return this.setTempNight(data3h.temp, data3h.weather[0].icon);
        }
        if (data3h.time === '14:00') {
          return this.setTempDay(data3h.temp, data3h.weather[0].icon);
        }
      });
  }

  setTempDay(temp, icon) {
    this.setState({
      tempDay: temp,
      dayIcon: icon
    });
  }

  setTempNight(temp, icon) {
    this.setState({
      tempNight: temp,
      nightIcon: icon
    });
  }

  render() {
    const { day, data, isFahrenheit, title } = this.props;

    let date;
    /* Convert unix timestamp (recieved as 'day') for each day */
    /* if the unix timestamp is generated by Date.now() */
    /* it needs some special care, since it's not in "true" unix-format */
    if (day > 10000000000) {
      date = new Date(day).toDateString().substr(0, 10);
    } else {
      date = convertUnixToDate(day)
        .toDateString()
        .substr(0, 10);
    }

    return (
      <tbody>
        <tr>
          <th className="day-overview" onClick={this.handleSelect}>
            <span>{!title ? date : title}</span>
            {this.state.tempDay && (
              <span>
                <img
                  className="weather-icon"
                  src={`http://openweathermap.org/img/w/${
                    this.state.dayIcon
                  }.png`}
                  alt="You'll figure it out by reading the rest of the data"
                />
                <Temperature
                  temp={this.state.tempDay}
                  isFahrenheit={isFahrenheit}
                />
              </span>
            )}
            {this.state.tempNight && (
              <span>
                <img
                  className="weather-icon"
                  src={`http://openweathermap.org/img/w/${
                    this.state.nightIcon
                  }.png`}
                  alt="You'll figure it out by reading the rest of the data"
                />

                <Temperature
                  temp={this.state.tempNight}
                  isFahrenheit={isFahrenheit}
                />
              </span>
            )}
          </th>
        </tr>
        {this.state.isShowingDetails ? (
          <React.Fragment>
            <tr className="weather-columns">
              <th scope="col">time</th>
              <th scope="col">weather</th>
              <th scope="col">temp.</th>
              <th scope="col">rain</th>
              <th scope="col">humidity</th>
              <th scope="col">wind</th>
            </tr>
            {Object.values(data).map((data3h, i) => (
              <HourInterval key={i} data={data3h} isFahrenheit={isFahrenheit} />
            ))}
          </React.Fragment>
        ) : null}
      </tbody>
    );
  }
}

export default Day;
